// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

abstract contract Storage {
    address public implementation;

    uint256 public a;
    uint256 public b;
    string public name;
}

contract Implementation1 is Storage {
    function imp1(uint256 _a) external {
        a = _a;
    }
    function setdata(uint256 _b)external{
        b=_b+50;
    }  
}

contract Implementation2 is Storage {
    function imp2(uint256 _a) external {
        a = _a * 100;
    }
      function setdata(uint256 _b)external{
        b=_b+100;
    }
    function setname(string memory _name)external {
        name=_name;
    }

}

contract Proxy is Storage {
    constructor(address imp) {
        implementation = imp;
    }

    receive() external payable {}

    fallback() external payable {
        address imp = implementation;
        assembly {
            calldatacopy(0, 0, calldatasize())
            let result := delegatecall(
                gas(),
                imp,
                0,
                calldatasize(),
                0,
                0
            )
            returndatacopy(0, 0, returndatasize())

            switch result
            case 0 {
                revert(0, returndatasize())
            }
            default {
                return(0, returndatasize())
            }
        }
    }

    function updateImp(address _imp) external {
        implementation = _imp;
    }
}